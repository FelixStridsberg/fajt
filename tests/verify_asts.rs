//! This file generates test cases from "snapshot" files.
//! The snapshot files contains javascript and the AST we expect that javascript to be parsed to.
//!
//! In our case, the snapshot files are .md files and contain both javascript and json in the same
//! file. The .md file format was chosen because many editors and viewers have support for syntax
//! highlighting of both javascript and json in the same file.
//!
//! Each test file generates a test named as the file name with some characters replaced.
//! For example:
//!     folder/new-empty-args.md
//! will generate the test case:
//!     folder__new_empty_args
//! this test is generated by a procedural macro and can be run as any other test.
//!
//! Generation of AST
//! It's very cumbersome to write the json AST by hand, to make testing easier you can simply put
//! the js part in the .md file, then run the test. The test will fail the first time but append
//! the json AST to the .md file. Verify that the ast is correct and rerun.
//!
//! The generation is also for future compatibility. When the ast changes, we can regenerate all
//! ASTs in the test cases and just verify the diff instead of manually refactoring hundreds of
//! test assertions.
extern crate fajt_macros;

mod markdown;

use markdown::TestFile;
use fajt_parser::error::{ErrorKind, Result};
use serde::{Deserialize, Serialize};
use std::fmt::Debug;

// TODO possibility to regenerate all asts.

macro_rules! generate_test_cases {
    ("md", $file_path:literal, $ident:ident) => {
        #[test]
        fn $ident() {
            snapshot_runner($file_path)
        }
    };
    ("md_ignore", $file_path:literal, $ident:ident) => {
        #[ignore]
        #[test]
        fn $ident() {
            snapshot_runner($file_path)
        }
    };
    ($extension:literal, $file_path:literal, $ident:ident) => {};
}

macro_rules! generate_test_module {
    (
        mod_name: $mod_name:ident,
        ast_type: $ast_type:ident,
        source_type: $source_type:ident,
        folders: [$( $folder:literal ),*],
    ) => {
        /// Everything inside snapshots/expr is parsed as expressions.
        mod $mod_name {
            use super::evaluate_result;
            use super::markdown::TestFile;
            use fajt_parser::parse;
            use fajt_macros::for_each_file;
            use fajt_ast::$ast_type;
            use fajt_ast::SourceType::$source_type;

            fn snapshot_runner(test_file: &str) {
                println!("Running: {}", test_file);

                let markdown = TestFile::from(&test_file);
                let result = parse::<$ast_type>(&markdown.source, $source_type);
                evaluate_result(result, &markdown);
            }

            $(
                for_each_file!($folder, generate_test_cases);
            )*
        }
    }
}

generate_test_module!(
    mod_name: expr,
    ast_type: Expr,
    source_type: Script,
    folders: ["tests/cases/expr"],
);

generate_test_module!(
    mod_name: stmt,
    ast_type: Stmt,
    source_type: Script,
    folders: ["tests/cases/stmt"],
);

generate_test_module!(
    mod_name: decl,
    ast_type: Stmt,
    source_type: Script,
    folders: ["tests/cases/decl"],
);

generate_test_module!(
    mod_name: semicolon,
    ast_type: Program,
    source_type: Unknown,
    folders: ["tests/cases/semicolon"],
);

generate_test_module!(
    mod_name: strict_mode,
    ast_type: Program,
    source_type: Script,
    folders: ["tests/cases/strict-mode"],
);

generate_test_module!(
    mod_name: source_module,
    ast_type: Program,
    source_type: Module,
    folders: ["tests/cases/source-module"],
);

generate_test_module!(
    mod_name: source_script,
    ast_type: Program,
    source_type: Script,
    folders: ["tests/cases/source-script"],
);

fn evaluate_result<'a, 'b: 'a, T>(result: Result<T>, markdown: &'b TestFile)
where
    T: Deserialize<'a> + Serialize + PartialEq + Debug,
{
    if let Some(expected_data) = &markdown.ast {
        if let Ok(result) = result {
            let expected_expr: T = serde_json::from_str(&expected_data).unwrap();
            assert_eq!(result, expected_expr)
        } else {
            let error = result.unwrap_err();
            println!("Error: {:?}", error);

            let expected_error: ErrorKind = serde_json::from_str(&expected_data).unwrap();
            assert_eq!(error.kind(), &expected_error)
        }
    } else {
        if let Ok(result) = result {
            let json = serde_json::to_string_pretty(&result).unwrap();
            markdown.append_json_block(&json);
            panic!("No ast found in this test. Json generated, verify and rerun.");
        } else {
            let error = serde_json::to_string_pretty(&result.unwrap_err().kind()).unwrap();
            markdown.append_json_block(&error);
            panic!("No ast found in this test. Json error generated, verify and rerun.");
        }
    }
}

#[allow(unused)]
fn regenerate_asts<'a, 'b: 'a, T>(result: Result<T>, markdown: &'b TestFile)
where
    T: Deserialize<'a> + Serialize + PartialEq + Debug,
{
    if let Ok(result) = result {
        let json = serde_json::to_string_pretty(&result).unwrap();
        markdown.replace_json_block(&json)
    } else {
        let json = serde_json::to_string_pretty(&result.unwrap_err().kind()).unwrap();
        markdown.replace_json_block(&json)
    }
}

#[test]
fn dummy() {
    // This is just so IDE recognize this is a runnable file.
}
